/* 
 * UP
 * Ustaoglu 09
 *
 */

// Hash functions
hashfunction h1,h2,exp;
hashfunction KDF;

hashfunction H,HE,add,mult;

usertype group;
usertype string;

const g: group;
const UPTEXT: string;

/*
 * Hack to simulate g^ab = g^ba.
 * '@' prefix of protocol name denotes helper protocol, which is used by
 * Scyther for displaying, and such protocols are ignored in
 * auto-generation of protocol modifiers.
 */
protocol @exponentiation(RA,RB,RC)
{
	role RA
	{
		var alpha,beta, T1,T2: Ticket;

		recv_!1(RA,RA, exp(exp(g,T1),T2) );
		send_!2(RA,RA, exp(exp(g,T2),T1) );
	}
	role RB
	{
		var alpha,beta, T1,T2,T3: Ticket;

		recv_!3(RB,RB, H( exp(exp(g,T1),T2),T3) );
		send_!4(RB,RB, H( exp(exp(g,T2),T1),T3) );
	}
	role RC
	{
		var alpha,beta, T1,T2,T3: Ticket;

		recv_!5(RC,RC, H( T3,exp(exp(g,T1),T2) ) );
		send_!6(RC,RC, H( T3,exp(exp(g,T2),T1) ) );
	}
}

// The protocol description

protocol UP(I,R)
{
	role I
	{
		const x: Nonce;
		var Y: Ticket;

		send_1(I,R,  exp(g,x) );
		recv_2(R,I,  Y );

		claim(I,SKR,
		  H(
		    exp(
		      mult(Y,exp(pk(R),HE(Y))),
		      add(x,sk(I))
		    ),
		    exp(
		      mult(Y,pk(R)),
		      add(x,mult(HE(exp(g,x)),sk(I)))
		    ),
		    I,R,
		    exp(g,x),Y,
		    UPTEXT
		  )
		);
	}	
	
	role R
	{
		const y: Nonce;
		var X: Ticket;

		recv_1(I,R,  X );
		send_2(R,I,  exp(g,y) );

		claim(R,SKR,
		  H(
		    exp(
		      mult(X,pk(I)),
		      add(y,mult(HE(exp(g,y)),sk(R)))
		    ),
		    exp(
		      mult(X,exp(pk(I),HE(X)),
		      add(y,sk(R)))
		    ),
		    I,R,
		    X,exp(g,y),
		    UPTEXT
		  )
		);
	}
}


