/* 
 * NAXOS AKE (Authenticated Key Exchange) protocol
 *
 * From "Stronger Security of Authenticated Key Exchange"
 * LaMacchia Lauter Mityagin 2006
 *
 * It's not really NAXOS in the sense that we don't have the group
 * exponentiations. These are emulated by the exponentiation protocol,
 * which simulates the g^ab = g^ba relation inside of the generated key
 * term. This is of course an underapproximation of the algebraic
 * properties but because we are here only looking for attacks, it seems
 * to be no problem.
 *
 * Attacks:
 * 
 * For full-compromise (generated) and matching partners, we find
 * attacks for both the initiator and responder roles.
 */

// Hash functions
hashfunction h1,h2,mexp;

const g;

/*
 * Hack to simulate public knowledge of public keys.
 */
protocol @publickeys(PK)
{
	role PK
	{
		send_!1(PK,PK, mexp(g,sk(PK)));
	}
}
		
/*
 * Hack to simulate g^ab = g^ba inside terms.
 * '@' prefix of protocol name denotes helper protocol, which is used by
 * Scyther for displaying, and such protocols are ignored in
 * auto-generation of protocol modifiers.
 */
protocol @exponentiation(RA,RB,RC)
{
	role RA
	{
		var X,Y, T1,T2: Ticket;

		recv_!1(RA,RA, h2(
		  mexp(mexp(g,X),Y),
		  T1, T2, RA,RB
		  ));
		send_!2(RA,RA, h2(
		  mexp(mexp(g,Y),X),
		  T1, T2, RA,RB
		  ));
	}
	role RB
	{
		var X,Y, T1,T2: Ticket;

		recv_!3(RB,RB, h2(
		  T1,
		  mexp(mexp(g,X),Y),
		  T2, RA,RB
		  ));
		send_!4(RB,RB, h2(
		  T1,
		  mexp(mexp(g,Y),X),
		  T2, RA,RB
		  ));
	}
	role RC
	{
		var X,Y, T1,T2: Ticket;

		recv_!5(RC,RC, h2(
		  T1, T2,
		  mexp(mexp(g,X),Y),
		  RA,RB
		  ));
		send_!6(RC,RC, h2(
		  T1, T2,
		  mexp(mexp(g,Y),X),
		  RA,RB
		  ));
	}
}

protocol @keysymmetry(R1,R2,R3)
{
	role R1
	{
		var Y,X: Ticket;
		var Z1,Z2: Ticket;

		recv_!1(R1,R1, h2( 
			mexp(mexp(g,Y),X),
			Z1,Z2,
			R1,R2));
		send_!2(R1,R1, h2( 
			mexp(mexp(g,X),Y), 
			Z1,Z2,
			R1,R2));
	}
	role R2
	{
		var Y,X: Ticket;
		var Z1,Z2: Ticket;

		recv_!4(R2,R2, h2( 
			Z1,
			mexp(mexp(g,Y),X),
			Z2,
			R2,R3));
		send_!5(R2,R2, h2( 
			Z1,
			mexp(mexp(g,X),Y), 
			Z2,
			R2,R3));
	}
	role R3
	{
		var Y,X: Ticket;
		var Z1,Z2: Ticket;

		recv_!5(R3,R3, h2( 
			mexp(mexp(g,Y),X),
			Z1,
			Z2,
			R3,R1));
		send_!6(R3,R3, h2( 
			mexp(mexp(g,X),Y), 
			Z1,
			Z2,
			R3,R1));
	}
}

// The protocol description

protocol naxos(I,R)
{
	role I
	{
		const eskI: Nonce;
		var Y: Ticket;

		send_Compromise(I,I, eskI );

		send_1(I,R, mexp(g,h1(eskI,sk(I))) );

		recv_2(R,I, Y );

		claim(I,SKR,h2( 
			mexp(Y,sk(I)),
			mexp(mexp(g,sk(R)),h1(eskI,sk(I))), 
			mexp(Y,h1(eskI,sk(I))),
			I,R));
	}	
	
	role R
	{
		const eskR: Nonce;
		var X: Ticket;

		send_Compromise(R,R, eskR );

		recv_1(I,R, X );

		send_2(R,I, mexp(g,h1(eskR,sk(R))) );

		claim(R,SKR,h2( 
			mexp(mexp(g,sk(I)),h1(eskR,sk(R))), 
			mexp(X,sk(R)),
			mexp(X,h1(eskR,sk(R))),
			I,R));
	}
}

