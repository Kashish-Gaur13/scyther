/* 
 * KEA
 *
 * From "Security Analysis of KEA Authenticated Key Exchange Protocol"
 * Lauter, Mityagin, 2006.
 */

// PKI infrastructure

const pk: Function;
secret sk: Function;

// Hash functions
const h1,h2,g1,g2: Function;
secret unh1,unh2,ung1,ung2: Function;

inversekeys (pk,sk);
inversekeys (h1,unh1);
inversekeys (h2,unh2);
inversekeys (g1,ung1);
inversekeys (g2,ung2);

/*
 * Hack to gain equivalence of public keys to g^private.
 */
protocol @publickeys(RA,RB,RC)
{
	role RA
	{
		send_!1(RA,RA, g1(sk(RA)) );
	}
	role RB
	{
		// Special one to go into DH g2
		var T: Ticket;

		recv_!2(RB,RB, g2(g1(T),sk(RB)) );
		send_!3(RB,RB, g2(pk(RB),T) );
	}
	role RC
	{
		// Special one to go into DH g2
		var T: Ticket;

		recv_!4(RC,RC, g2(pk(RC),T) );
		send_!5(RC,RC, g2(g1(T),sk(RC)) );
	}
}

/*
 * Hack to simulate g^ab = g^ba.
 * '@' prefix of protocol name denotes helper protocol, which is used by
 * Scyther for displaying, and such protocols are ignored in
 * auto-generation of protocol modifiers.
 */
protocol @exponentiation(RA)
{
	role RA
	{
		var alpha,beta, T1,T2: Ticket;

		recv_!1(RA,RA, g2(g1(T1),T2) );
		send_!2(RA,RA, g2(g1(T2),T1) );
	}
}

// The protocol description

protocol KEA(I,R)
{
	role I
	{
		const x: Nonce;
		var beta: Ticket;

		send_Compromise(I,I, x);
		send_1(I,R, g1(x) );
		recv_2(R,I, beta );

		claim(I,Secret, h1(
		  g2(beta,sk(I)),
		  g2(pk(R),x)
		));
	}	
	
	role R
	{
		const y: Nonce;
		var alpha: Ticket;

		recv_1(I,R, alpha );
		send_Compromise(R,R, y);
		send_2(R,I, g1(y) );

		claim(R,Secret, h1(
		  g2(pk(I),y),
		  g2(alpha,sk(R))
		));
	}
}

// The agents in the system

const Alice,Bob: Agent;

// An untrusted agent, with leaked information

const Eve: Agent;
untrusted Eve;
compromised sk(Eve);
