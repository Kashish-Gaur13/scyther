// E-mail protocol variant Sun 1
// Sun et al. Secure E-mail protocols providing Perfect Forward Secrecy

// Hash functions
const h1,h2,g1,g2: Function;
secret unh1,unh2,ung1,ung2: Function;

inversekeys (h1,unh1);
inversekeys (h2,unh2);
inversekeys (g1,ung1);
inversekeys (g2,ung2);

usertype String;
const TRIG: String;

protocol @dhswap(R1,R2,R3)
{
	role R1
	{
		// standard
		var x,y: Nonce;
		recv_!1(R1,R1, g2(g1(x),y));
		send_!2(R1,R1, g2(g1(y),x));
	}
	role R2
	{
		// as key
		var x,y: Nonce;
		var T: Ticket;
		recv_!3(R2,R2, { T }g2(g1(x),y));
		send_!4(R2,R2, { T }g2(g1(y),x));
	}
	role R3
	{
		// in hash
		var x,y,z: Nonce;
		recv_!5(R3,R3, h1(g2(g1(x),y),g1(z)) );
		send_!6(R3,R3, h1(g2(g1(y),x),g1(z)) );
	}
}

protocol email-Sun1(B,S,A)
{
	role B
	{
		fresh M: Nonce;
		fresh y: Nonce;
		var X: Ticket;

		recv_1b(S,B, TRIG);
		send_2(B,S, { g1(y) }sk(B) );
		recv_3(S,B, { X }sk(A) ); 
		send_4(B,S, h1( g2(X,y), X ), { M }g2(X,y) ); 

		claim(B, Secret, M);
		claim(B, SKR, g2(X,y) );
	}
	role S
	{
		var X,Y,T1: Ticket;

		recv_1(A,S, { X }sk(A) );
		send_1b(S,B, TRIG);
		recv_2(B,S, { Y }sk(B) );
		send_3(S,B, { X }sk(A) ); 
		recv_4(B,S, T1 ); 
		send_5(S,A, Y, { Y }sk(B), T1 );
	}
	role A
	{
		var M: Nonce;
		var k: SessionKey;
		fresh x: Nonce;
		var Y: Ticket;

		send_1(A,S, { g1(x) }sk(A) );

		recv_5(S,A, Y, { Y }sk(B), h1( g2(Y,x), g1(x) ), { M }g2(Y,x) );

		claim(A, Secret, M);
		claim(A, SKR, g2(Y,x) );
	}
}

