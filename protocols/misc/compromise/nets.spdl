/* 
 * NETS AKE (Authenticated Key Exchange) protocol
 *
 * From "An Efficient Authenticated Key Exchange Protocol with a Tight
 * Security Reduction" (eprint archive).
 *
 * Jooyoung Lee and Choon Sik Park, 2008
 *
 */

// Hash functions
const h1,h2,g1,g2: Function;
secret unh1,unh2,ung1,ung2: Function;

inversekeys (h1,unh1);
inversekeys (h2,unh2);
inversekeys (g1,ung1);
inversekeys (g2,ung2);

// Addition, multiplication
// For now, simply hashes
const mult,add: Function;
secret unmult,unadd: Function;

inversekeys(mult,unmult);
inversekeys(add,unadd);

/*
 * Hack to simulate public knowledge of public keys.
 */
protocol @publickeys(PK)
{
	role PK
	{
		send_!1(PK,PK, g1(sk(PK)));
	}
}
		
/*
 * Hack to simulate g^ab = g^ba inside terms.
 * '@' prefix of protocol name denotes helper protocol, which is used by
 * Scyther for displaying, and such protocols are ignored in
 * auto-generation of protocol modifiers.
 */
protocol @exponentiation(RA,RB,RC)
{
	role RA
	{
		var X,Y, T1,T2: Ticket;

		recv_!1(RA,RA, h2(
		  g2(g1(X),Y),
		  T1, T2, RA,RB
		  ));
		send_!2(RA,RA, h2(
		  g2(g1(Y),X),
		  T1, T2, RA,RB
		  ));
	}
	role RB
	{
		var X,Y, T1,T2: Ticket;

		recv_!3(RB,RB, h2(
		  T1,
		  g2(g1(X),Y),
		  T2, RA,RB
		  ));
		send_!4(RB,RB, h2(
		  T1,
		  g2(g1(Y),X),
		  T2, RA,RB
		  ));
	}
	role RC
	{
		var X,Y, T1,T2: Ticket;

		recv_!5(RC,RC, h2(
		  T1, T2,
		  g2(g1(X),Y),
		  RA,RB
		  ));
		send_!6(RC,RC, h2(
		  T1, T2,
		  g2(g1(Y),X),
		  RA,RB
		  ));
	}
}

protocol @keysymmetry(R1,R2)
{
	role R1
	{
		var Y1,Y2,X1,X2: Ticket;
		var Z0,Z1,Z2: Ticket;

		recv_!1(R1,R1, h2( 
			g2(mult(g1(Y1),g1(Y2)),add(X1,X2)),
			Z0,
			Z1,Z2,
			R1,R2));
		send_!2(R1,R1, h2( 
			g2(mult(g1(X1),g1(X2)),add(Y1,Y2)),
			Z0,
			Z1,Z2,
			R1,R2));
	}
	role R2
	{
		var Y,X: Ticket;
		var Z0,Z1,Z2: Ticket;

		recv_!4(R2,R2, h2( 
			Z1,
			g2(g1(Y),X),
			Z0,
			Z2,
			R2,R1));
		send_!5(R2,R2, h2( 
			Z1,
			g2(g1(X),Y), 
			Z0,
			Z2,
			R2,R1));
	}
}

// The protocol description

protocol nets(I,R)
{
	role I
	{
		const eskI: Nonce;
		var Y: Ticket;

		send_Compromise(I,I, eskI );

		send_1(I,R, g1(h1(eskI,sk(I))) );

		recv_2(R,I, Y );

		claim(I,SKR,h2( 
			g2(mult(pk(R),Y),add(sk(I),h1(eskI,sk(I)))),
			g2(Y,h1(eskI,sk(I))),
			g1(h1(eskI,sk(I))),Y,I,R));
	}	
	
	role R
	{
		const eskR: Nonce;
		var X: Ticket;

		send_Compromise(R,R, eskR );

		recv_1(I,R, X );

		send_2(R,I, g1(h1(eskR,sk(R))) );

		claim(R,SKR,h2( 
			g2(mult(pk(I),X),add(sk(R),h1(eskR,sk(R)))),
			g2(X,h1(eskR,sk(R))),
			X,g1(h1(eskR,sk(R))),I,R));
	}
}

