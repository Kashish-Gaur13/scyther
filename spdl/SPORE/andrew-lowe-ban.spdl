# Lowe modified BAN concrete Andrew Secure RPC
#
# Modelled after the description in the SPORE library
# http://www.lsv.ens-cachan.fr/spore/andrewLowe.html
#
# Note:
# The shared key between I and R is modelled as k(I,R) currently
# there is no way to express that this key is equal to k(R,I)
# So it is possile that certain attacks that use this property are not found
#
# Note:
# Read 4 by the Initatior has been placed after the synchronisation claim
# as it allows trivial synchronisation attacks otherwise (the message is
# completely fresh and can therefore always be replaced by an arbitrary value
# created by the intruder) which are not considered in SPORE
#
# Note:
# According to SPORE there are no known attacks on this protocol
#

usertype SessionKey;
secret k: Function;
const Fresh: Function;
const Compromised: Function;

protocol andrewLoweBanSessionKeyCompromise(C)
{
    // Read the names of 2 agents and disclose a session between them including
    // corresponding session key to simulate key compromise
    role C {
        const ni,nr: Nonce;
        const kir: SessionKey;
        var I,R: Agent;

        read_C1(C,C,    I,R);
        send_C2(C,C,    (I,ni),
                        {ni,kir,R}k(I,R),
                        {ni}kir,
                        nr,
                        kir
               );
        claim_C3(C,Empty, (Compromised,kir));
    }
}

protocol andrewLoweBan(I,R)
{
    role I
    {
        const ni: Nonce;
        var nr: Nonce;
        var kir: SessionKey;

        send_1(I,R, I,ni );
        read_2(R,I, {ni,kir,R}k(I,R) );
        send_3(I,R, {ni}kir );
        claim_I1(I,Nisynch);
        claim_I2(I,Secret, kir);
        claim_I3(I,Empty, (Fresh,kir));
        read_4(R,I, nr );
    }    
    
    role R
    {
        var ni: Nonce;
        const nr: Nonce;
        const kir: SessionKey;

        read_1(I,R, I,ni );
        send_2(R,I, {ni,kir,R}k(I,R) );
        read_3(I,R, {ni}kir );
        send_4(R,I, nr );
        claim_R1(R,Nisynch);
        claim_R2(R,Secret, kir);
        claim_R3(R,Empty, (Fresh,kir));
    }
}

const Alice,Bob,Eve: Agent;

untrusted Eve;
const ne: Nonce;
const kee: SessionKey;
compromised k(Eve,Eve);
compromised k(Eve,Alice);
compromised k(Eve,Bob);
compromised k(Alice,Eve);
compromised k(Bob,Eve);



run andrewLoweBan.I(Agent,Agent);
run andrewLoweBan.R(Agent,Agent);
run andrewLoweBan.I(Agent,Agent);
run andrewLoweBan.R(Agent,Agent);
